// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleUtilisateur {
  ADMIN
  EMPLOYE
  CLIENT
}

enum Language {
  EN
  FR
  AR
}

model Product {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   // Default name (e.g., in French)
  brand       String
  type        String
  description String   @db.Text  // Default description
  features    Json
  category    String
  subCategory String?  // For accessories: FILTRE, TUYAU, etc.
  stock       StockStatus @default(IN_STOCK)
  translations ProductTranslation[]
  reviews     Review[]
  media       Media[]  // Relation to media files
  orderItems  CommandeItem[]
}

enum StockStatus {
  IN_STOCK
  OUT_OF_STOCK
  LOW_STOCK
  PRE_ORDER
  COMING_SOON
}

model Media {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String   // URL or path to the media file
  type      String   // "image" or "video"
  alt       String?  // Alternative text for images
  order     Int      // For ordering media files
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rating    Int
  comment   String?  @db.Text
  userName  String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @db.Text
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ProductTranslation {
  id          String   @id @default(cuid())
  productId   String
  language    Language
  name        String
  description String   @db.Text
  features    Json?    // Translated features
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, language])
}

model Utilisateur {
  id             String           @id @default(cuid())
  dateCreation   DateTime         @default(now())
  dateMiseAJour  DateTime        @updatedAt
  email          String          @unique
  motDePasse     String
  nom            String
  prenom         String
  role           RoleUtilisateur @default(CLIENT)
  adresse        String?
  ville          String?
  codePostal     String?
  actif          Boolean         @default(true)
  telephone      String?
  photo          String?
  emailVerified  Boolean         @default(false)
  verificationToken VerificationToken?
  commandes     Commande[]
  contacts      Contact[]
  appointments  Appointment[]
}

enum StatusCommande {
  EN_ATTENTE
  CONFIRMEE
  EN_COURS
  LIVREE
  ANNULEE
  DEVIS
}

model Commande {
  id            String         @id @default(cuid())
  dateCreation  DateTime       @default(now())
  dateMiseAJour DateTime       @updatedAt
  status        StatusCommande @default(EN_ATTENTE)
  utilisateur   Utilisateur    @relation(fields: [utilisateurId], references: [id])
  utilisateurId String
  items         CommandeItem[]
  adresse       String?
  ville         String?
  codePostal    String?
  telephone     String?
}

model CommandeItem {
  id         String   @id @default(cuid())
  quantity   Int
  commande   Commande @relation(fields: [commandeId], references: [id])
  commandeId String
  product    Product  @relation(fields: [productId], references: [id])
  productId  String
}

// New models for Contact and Appointment
model Contact {
  id            String      @id @default(cuid())
  dateCreation  DateTime    @default(now())
  message       String      @db.Text
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  utilisateurId String
}

enum StatusRdv {
  EN_ATTENTE
  CONFIRME
  ANNULE
}

model Appointment {
  id            String      @id @default(cuid())
  dateCreation  DateTime    @default(now())
  dateMiseAJour DateTime    @updatedAt
  dateRdv       DateTime
  motif         String      @db.Text
  status        StatusRdv   @default(EN_ATTENTE)
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])
  utilisateurId String
}

model VerificationToken {
  id        String      @id @default(cuid())
  token     String      @unique
  expires   DateTime
  user      Utilisateur @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String      @unique
  createdAt DateTime    @default(now())
}
